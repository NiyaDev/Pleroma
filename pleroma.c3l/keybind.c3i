
module pleroma::keybind;
import std::collections;
import pleroma::raylib;

struct Keybind {
  KeyType type;

  union {
    KeyboardKey kb;
    MouseButton mb;
    MouseAxis ma;
    GamepadButton gpb;
    GamepadAxis gpa;
  }
  union {
    KeyboardKey kb_m;
    MouseButton mb_m;
    GamepadButton gpb_m;
  }

  int pad;
}

enum KeyType {
  KEYBOARD,
  MOUSE_BUTTON,
  MOUSE_AXIS,
  GAMEPAD_BUTTON,
  GAMEPAD_AXIS,
}

alias Keybindings = HashMap{String, Keybind};

KeyType last_type = KEYBOARD;

extern fn char[] Keybindings.save(&self) @extern("keybind_save");
extern fn Keybindings load(char[]) @extern("keybind_load");

extern fn bool Keybindings.is_pressed(&self, String) @extern("keybind_pressed");
extern fn bool Keybindings.is_down(&self, String) @extern("keybind_down");

extern fn void ready_scan(float) @extern("keybind_readyscan");
extern fn void scan() @extern("keybind_scan");
extern fn Keybind conver_scan() @extern("keybind_convertscan");

