
module pleroma::logos;

struct Logos {
  inline char[] data;
  Compression compression;
  usz head;
}

enum Compression {
  NONE,
  DEFLATE,
}

struct LogosData {
  LogosType type;
  union {
    char as_char;
    short as_short;
    int as_int;
    long as_long;

    float as_float;
    double as_double;

    char[] as_char_array;
    short[] as_short_array;
    int[] as_int_array;
    long[] as_long_array;
    float[] as_float_array;
    double[] as_double_array;

    String as_string;
  }
}

enum LogosType : char (usz size) {
  CHAR         = 1,
  SHORT        = 2,
  INT          = 4,
  LONG         = 8,
  FLOAT        = 4,
  DOUBLE       = 8,
  CHAR_ARRAY   = 1,
  SHORT_ARRAY  = 2,
  INT_ARRAY    = 4,
  LONG_ARRAY   = 8,
  FLOAT_ARRAY  = 4,
  DOUBLE_ARRAY = 8,
  STRING       = 1,
}

extern fn Logos char[].to_logos(&self) @extern("logos_tologos");
extern fn Logos new(usz size = 0, Compression comp = NONE) @extern("logos_new");
extern fn Logos file(String, Compression comp = NONE) @extern("logos_file");
extern fn void Logos.save(&self, String) @extern("logos_save");
extern fn void Logos.free(&self) @extern("logos_free");
extern fn void Logos.write(&self, LogosData) @extern("logos_write");
extern fn LogosData Logos.read(&self, LogosType) @extern("logos_read");

extern fn void LogosData.free(&self) @extern("logo_freedata");

