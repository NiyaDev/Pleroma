
module pleroma::raylib;
//= Audio
struct Wave {
  uint frame_count;
  uint sample_rate;
  uint sample_size;
  uint channels;
  void* data;
}
struct Sound {
	AudioStream stream;
  uint frameCount;
}
struct Music {
	AudioStream stream;
	uint frame_count;
	bool looping;

	int ctx_type;
	void* ctx_data;
}
struct AudioStream {
	AudioBufferRef buffer;
	AudioProcessorRef processor;

  uint sample_rate;
  uint sample_size;
  uint channels;
}
def AudioBufferRef = void*;
def AudioProcessorRef = void*;

extern fn void  init_audio_device() 								@extern("InitAudioDevice");
extern fn void  close_audio_device() 								@extern("CloseAudioDevice");
extern fn bool  audio_device_is_ready() 						@extern("IsAudioDeviceReady");
extern fn void  set_master_volume(float volume) 		@extern("SetMasterVolume");
extern fn float get_master_volume() 								@extern("GetMasterVolume");

extern fn bool   Wave.ready(self)  									@extern("IsWaveValid");
extern fn Sound  Wave.sound(self)  									@extern("LoadSoundFromWave");
extern fn void   Wave.unload(self) 									@extern("UnloadWave");
extern fn bool   Wave.save(self, String)    				@extern("ExportWave");
extern fn bool   Wave.save_code(self, String) 			@extern("ExportWaveAsCode");
extern fn Wave   Wave.copy(self)   									@extern("WaveCopy");
extern fn void   Wave.crop(self, int, int) 					@extern("WaveCrop");
extern fn void   Wave.format(&self, int, int, int) 	@extern("WaveFormat");
extern fn float* Wave.samples(self) 							 	@extern("LoadWaveSamples");
extern fn void   unload_samples(float*) 						@extern("UnloadWaveSamples");

extern fn bool   AudioStream.ready(self) 						@extern("IsAudioStreamValid");
extern fn void   AudioStream.unload(self) 					@extern("UnloadAudioStream");
extern fn void   AudioStream.update(self, void*, int) @extern("UpdateAudioStream");
extern fn bool   AudioStream.processed(self) 				@extern("IsAudioStreamProcessed");
extern fn void   AudioStream.play(self) 						@extern("PlayAudioStream");
extern fn void   AudioStream.pause(self) 						@extern("PauseAudioStream");
extern fn void   AudioStream.resume(self) 					@extern("ResumeAudioStream");
extern fn void   AudioStream.playing(self) 					@extern("IsAudioStreamPlaying");
extern fn void   AudioStream.stop(self) 						@extern("StopAudioStream");
extern fn void   AudioStream.volume(self) 					@extern("SetAudioStreamVolume");
extern fn void   AudioStream.pitch(self) 						@extern("SetAudioStreamPitch");
extern fn void   AudioStream.pan(self) 							@extern("SetAudioStreamPan");

extern fn Sound  Sound.alias(self) 									@extern("LoadSoundAlias");
extern fn bool   Sound.ready(self) 									@extern("IsSoundValid");
extern fn void   Sound.update(self, void*, int) 		@extern("UpdateSound");
extern fn void   Sound.unload(self) 								@extern("UnloadSound");
extern fn void   Sound.unload_alias(self) 					@extern("UnloadSoundAlias");
extern fn void   Sound.play(self) 									@extern("PlaySound");
extern fn void   Sound.pause(self) 									@extern("PauseSound");
extern fn void   Sound.resume(self) 								@extern("ResumeSound");
extern fn void   Sound.playing(self) 								@extern("IsSoundPlaying");
extern fn void   Sound.stop(self) 									@extern("StopSound");
extern fn void   Sound.volume(self) 								@extern("SetSoundVolume");
extern fn void   Sound.pitch(self) 									@extern("SetSoundPitch");
extern fn void   Sound.pan(self) 										@extern("SetSoundPan");

extern fn bool   Music.ready(self) 									@extern("IsMusicValid");
extern fn void   Music.unload(self) 								@extern("UnloadMusicStream");
extern fn void   Music.update(self) 								@extern("UpdateMusicStream");
extern fn void   Music.play(self) 									@extern("PlayMusicStream");
extern fn void   Music.pause(self) 									@extern("PauseMusicStream");
extern fn void   Music.resume(self) 								@extern("ResumeMusicStream");
extern fn void   Music.playing(self) 								@extern("IsMusicStreamPlaying");
extern fn void   Music.stop(self) 									@extern("StopMusicStream");
extern fn void   Music.volume(self) 								@extern("SetMusicStreamVolume");
extern fn void   Music.pitch(self) 									@extern("SetMusicStreamPitch");
extern fn void   Music.pan(self) 										@extern("SetMusicStreamPan");
extern fn void   Music.seek(self) 									@extern("SeekMusicStream");
extern fn float  Music.length(self) 								@extern("GetMusicTimeLength");
extern fn float  Music.played(self) 								@extern("GetMusicTimePlayed");


//= Bounds
struct BoundingBox {
  Vector3 min, max;
}
extern fn void BoundingBox.draw(self, Color) @extern("DrawBoundingBox");

//= Buttons
enum MouseButton {
  LEFT,
  RIGHT,
  MIDDLE,
  SIDE,
  EXTRA,
  FORWARD,
  BACK,
}
enum MouseAxis {
  X,
  Y,
  SCROLL,
}
enum GamepadButton : int {
  UNKNOWN,
  LEFT_FACE_UP,
  LEFT_FACE_RIGHT,
  LEFT_FACE_DOWN,
  LEFT_FACE_LEFT,
  RIGHT_FACE_UP,
  RIGHT_FACE_RIGHT,
  RIGHT_FACE_DOWN,
  RIGHT_FACE_LEFT,
  LEFT_TRIGGER_1,
  LEFT_TRIGGER_2,
  RIGHT_TRIGGER_1,
  RIGHT_TRIGGER_2,
  MIDDLE_LEFT,
  MIDDLE,
  MIDDLE_RIGHT,
  LEFT_THUMB,
  RIGHT_THUMB,
}
enum GamepadAxis : int {
  LEFT_X,
  LEFT_Y,
  RIGHT_X,
  RIGHT_Y,
  LEFT_TRIGGER,
  RIGHT_TRIGGER,
}
distinct KeyboardKey = int;

//= Camera
struct Camera2D {
  Vector2 offset, target;
  float rotation, zoom;
}
struct Camera3D {
  Vector3 position, target, up;
  float fovy;
  CameraProjection projection;
}
enum CameraProjection {
  PERSPECTIVE,
  ORTHOGRAPHIC,
}

//= Color
struct Color {
  char r, g, b, a;
}
extern fn void    Color.fade(&self, float) @extern("color_fade");
extern fn uint    Color.to_int(self)       @extern("color_toint");
extern fn Vector4 Color.normalize(self)    @extern("color_normalize");
extern fn Vector3 Color.hsv(self) 				 @extern("color_tint");
extern fn Color   Color.tint(self, Color)  @extern("color_tint");
extern fn Color   Color.brightness(self, float) @extern("color_brightness");
extern fn Color   Color.contrast(self, float) @extern("color_contrast");
extern fn Color   Color.alpha(self, float) @extern("color_alpha");
extern fn Color   Color.multiply(self, float) @extern("color_multiply");
extern fn Color   Color.alphablend(self, Color, Color) @extern("color_alphablend");
extern fn Color   hex(uint) 							 @extern("color_hex");

//= FilePathList
struct FilePathList {
  uint capacity, count;
  char** paths;
}

//= float
extern fn bool close(float, float, float) @extern("float_close");

//= Font
struct Font {
	int base_size;
	int glyph_count;
	int glyph_padding;
	Texture texture;
	Rectangle* recs;
	GlyphInfo* glyphs;
}
struct GlyphInfo {
	int value;
	int offset_x;
	int offset_y;
	int advance_x;
	Image image;
}
extern fn bool Font.ready(self)  @extern("IsFontValid");
extern fn void Font.unload(self) @extern("UnloadFont");
extern fn void Font.draw(self, String, Vector2, float, float, Color) @extern("DrawTextEx");
extern fn void Font.draw_pro(self, String, Vector2, Vector2, float, float, float, Color) @extern("DrawTextPro");
extern fn Vector2 Font.measure(self, String, float, float) @extern("MeasureTextEx");

//= Image
struct Image {
	void* data;
	int width;
	int height;
	int mipmaps;
	PixelFormat format;
}
extern fn Texture Image.texture(self) @extern("LoadTextureFromImage");

//= Material
struct Material {
  Shader shader;
  MaterialMap* maps;
  float[4] params;
}
struct MaterialMap {
  Texture texture;
  Color color;
  float value;
}
enum MaterialMapIndex : int {
    ALBEDO,
    METALNESS,
    NORMAL,
    ROUGHNESS,
    OCCLUSION,
    EMISSION,
    HEIGHT,
    CUBEMAP,
    IRRADIANCE,
    PREFILTER,
    BRDF,
    DEPTH0,
    DEPTH1,
    DEPTH2,
    DEPTH3,
}

//= Matrix
struct Matrix {
	float m0, m4, m8,  m12;
	float m1, m5, m9,  m13;
	float m2, m6, m10, m14;
	float m3, m7, m11, m15;
}

//= Model
struct Mesh {
	int vertexCount;
	int triangleCount;
	float* vertices;
	float* texcoords;
	float* texcoords2;
	float* normals;
	float* tangents;
	char* colors;
	ushort* indices;
	float* animVertices;
	float* animNormals;
	char* boneIds;
	float* boneWeights;
	Matrix* boneMatrices;
	int boneCount;
	uint vaoId;
	uint *vboId;
}

<* Model *>
struct Model {
	Matrix transform;
	int meshCount;
	int materialCount;
	Mesh* meshes;
	Material* materials;
	int* meshMaterial;
	int boneCount;
	BoneInfo* bones;
	Transform* bindPose;
}
fault ModelFault {
	FAILED_FIND_FILE,
}
struct Transform {
	Vector3 translation;
	Quaternion rotation;
	Vector3 scale;
}
struct BoneInfo {
	char[32] name;
	int parent;
}
struct ModelAnimation {
	int n;
}

//= Quaternion
distinct Quaternion = Vector4;
struct AxisAngle {
	Vector3 axis;
	float angle;
}

//= Ray
struct Ray {
  Vector3 position, direction;
}
struct RayCollision {
  bool hit;
  float distance;
  Vector3 point, normal;
}

//= Rectangle
struct Rectangle {
  float x, y, width, height;
}

//= RenderTexture
struct RenderTexture {
	uint id;
	Texture texture, depth;
}
fault RenderTextureFault {
	FAILED_CREATE_RENDERTEXTURE,
}

//= Shader
struct Shader {
  uint id;
  int* locs;
}

//= Texture
struct Texture {
	uint id;
	int width, height, mipmaps;
	PixelFormat format;
}
fault TextureFault {
	FAILED_FIND_FILE,
}
struct NPatchInfo {
	Rectangle source;
	int left;
	int top;
	int right;
	int bottom;
	NPatchLayout layout;
}
enum NPatchLayout {
    NINE_PATCH,              // Npatch layout: 3x3 tiles
    THREE_PATCH_VERTICAL,    // Npatch layout: 1x3 tiles
    THREE_PATCH_HORIZONTAL   // Npatch layout: 3x1 tiles
}
enum TextureFilter {
	FILTER_POINT,
	FILTER_BILINEAR,
	FILTER_TRILINEAR,
	FILTER_ANISOTROPIC_4X,
	FILTER_ANISOTROPIC_8X,
	FILTER_ANISOTROPIC_16X,
}
enum TextureWrap {
	WRAP_REPEAT,
  WRAP_CLAMP,
  WRAP_MIRROR_REPEAT,
  WRAP_MIRROR_CLAMP
}
enum PixelFormat : int {
	GRAYSCALE,
	GRAYALPHA,
	R5G6B5,
	R8G8B8,
	R5G5B5A1,
	R4G4B4A4,
	R8G8B8A8,
	R32,
	R32G32B32,
	R32G32B32A32,
	R16,
	R16G16B16,
	R16G16B16A16,
	DXT1RGB,
	DXT1RGBA,
	DXT3RGBA,
	DXT5RGBA,
	ETC1RGB,
	ETC2RGB,
	ETC2EACRGBA,
	PVRTRGB,
	PVRTRGBA,
	ASTC4X4RGBA,
	ASTC8X8RGBA,
	UNKNOWN,
}
extern fn void Texture.draw(&self,int,int,Color) @extern("texture_draw");

//= tracelog
enum TraceLogLevel : int {
  ALL,            // Display all logs (0)
  TRACE,          // Trace logging, intended for internal use only
  DEBUG,          // Debug logging, used for internal debugging, it should be disabled on release builds
  INFO,           // Info logging, used for program execution info
  WARNING,        // Warning logging, used on recoverable failures
  ERROR,          // Error logging, used on unrecoverable failures
  FATAL,          // Fatal logging, used to abort program: exit(EXIT_FAILURE)
  NONE            // Disable logging
}

//= Vector
struct Vector2 {
  float x,y;
}
struct Vector3 {
  float x,y,z;
}
struct Vector4 {
  float x,y,z,w;
}

//= VRInfo
struct VrDeviceInfo {
	int h_resolution, v_resolution;
	float h_screen_size, v_screen_size;
	float eye_to_screen_distance;
	float lens_seperation_distance;
	float interpupillary_distance;
	float[4] lens_distortion_values;
	float[4] chroma_aberration_correction;
}
struct VrStereoConfig {
	Matrix[2] projection, view_offset;
	float[2] left_lens_center, right_lens_center;
	float[2] left_screen_center, right_screen_center;
	float[2] scale, scale_in;
}




module pleroma::raylib::wave;
extern fn Wave load(String) @extern("LoadWave");
extern fn Wave load_mem(String, char*, int) @extern("LoadWaveFromMemory");

module pleroma::raylib::sound;
extern fn Sound load(String) @extern("LoadSound");

module pleroma::raylib::audiostream;
extern fn AudioStream load(uint, uint, uint) @extern("LoadAudioStream");

module pleroma::raylib::music;
extern fn Music load(String) @extern("LoadMusicStream");
extern fn Music load_mem(String, char*, int) @extern("LoadMusicStreamFromMemory");

module pleroma::raylib::font;
extern fn Font get_default() @extern("GetFontDefault");
extern fn Font load(String) @extern("LoadFont");
extern fn Font load_ex(String, int, int[]) @extern("font_loadex");
extern fn Font Image.font(self, Color, int) @extern("LoadFontFromImage");
extern fn Font load_mem(String, char[], int, int[]) @extern("font_loadmem");

module pleroma::raylib::image;
extern fn Image load(String filename) @extern("image_load");


module pleroma::raylib::color;
const Color LIGHTGRAY		= {200, 200, 200, 255};
const Color GRAY		  	= {130, 130, 130, 255};
const Color DARKGRAY		= { 80,  80,  80, 255};
const Color YELLOW			= {253, 249,   0, 255};
const Color GOLD		  	= {255, 203,   0, 255};
const Color ORANGE	 		= {255, 161,   0, 255};
const Color PINK 				= {255, 109, 194, 255};
const Color RED 				= {230,  41,  55, 255};
const Color MAROON 			= {190,  33,  55, 255};
const Color GREEN 			= {  0, 228,  48, 255};
const Color LIME				= {  0, 158,  47, 255};
const Color DARKGREEN		= {  0, 117,  44, 255};
const Color SKYBLUE			= {102, 191, 255, 255};
const Color BLUE				= {  0, 121, 241, 255};
const Color DARKBLUE		= {  0,  82, 172, 255};
const Color PURPLE			= {200, 122, 255, 255};
const Color VIOLET			= {135,  60, 190, 255};
const Color DARKPURPLE	= {112,  31, 126, 255};
const Color BEIGE				= {211, 176, 131, 255};
const Color BROWN				= {127, 106,  79, 255};
const Color DARKBROWN		= { 76,  63,  47, 255};
const Color WHITE				= {255, 255, 255, 255};
const Color BLACK				= {  0,   0,   0, 255};
const Color BLANK				= {  0,   0,   0,   0};
const Color MAGENTA			= {255,   0, 255, 255};
const Color RAYWHITE		= {245, 245, 245, 255};
const Color PALETTE_30	= { 48,  56,  67, 255};


module pleroma::raylib;
const KeyboardKey KEY_NULL            = 0;        // Key: NULL; used for no key pressed
// Alphanumeric keys
const KeyboardKey KEY_APOSTROPHE      = 39;       // Key: '
const KeyboardKey KEY_COMMA           = 44;       // Key: ;
const KeyboardKey KEY_MINUS           = 45;       // Key: -
const KeyboardKey KEY_PERIOD          = 46;       // Key: .
const KeyboardKey KEY_SLASH           = 47;       // Key: /
const KeyboardKey KEY_ZERO            = 48;       // Key: 0
const KeyboardKey KEY_ONE             = 49;       // Key: 1
const KeyboardKey KEY_TWO             = 50;       // Key: 2
const KeyboardKey KEY_THREE           = 51;       // Key: 3
const KeyboardKey KEY_FOUR            = 52;       // Key: 4
const KeyboardKey KEY_FIVE            = 53;       // Key: 5
const KeyboardKey KEY_SIX             = 54;       // Key: 6
const KeyboardKey KEY_SEVEN           = 55;       // Key: 7
const KeyboardKey KEY_EIGHT           = 56;       // Key: 8
const KeyboardKey KEY_NINE            = 57;       // Key: 9
const KeyboardKey KEY_SEMICOLON       = 59;       // Key: ;
const KeyboardKey KEY_EQUAL           = 61;       // Key: =
const KeyboardKey KEY_A               = 65;       // Key: A | a
const KeyboardKey KEY_B               = 66;       // Key: B | b
const KeyboardKey KEY_C               = 67;       // Key: C | c
const KeyboardKey KEY_D               = 68;       // Key: D | d
const KeyboardKey KEY_E               = 69;       // Key: E | e
const KeyboardKey KEY_F               = 70;       // Key: F | f
const KeyboardKey KEY_G               = 71;       // Key: G | g
const KeyboardKey KEY_H               = 72;       // Key: H | h
const KeyboardKey KEY_I               = 73;       // Key: I | i
const KeyboardKey KEY_J               = 74;       // Key: J | j
const KeyboardKey KEY_K               = 75;       // Key: K | k
const KeyboardKey KEY_L               = 76;       // Key: L | l
const KeyboardKey KEY_M               = 77;       // Key: M | m
const KeyboardKey KEY_N               = 78;       // Key: N | n
const KeyboardKey KEY_O               = 79;       // Key: O | o
const KeyboardKey KEY_P               = 80;       // Key: P | p
const KeyboardKey KEY_Q               = 81;       // Key: Q | q
const KeyboardKey KEY_R               = 82;       // Key: R | r
const KeyboardKey KEY_S               = 83;       // Key: S | s
const KeyboardKey KEY_T               = 84;       // Key: T | t
const KeyboardKey KEY_U               = 85;       // Key: U | u
const KeyboardKey KEY_V               = 86;       // Key: V | v
const KeyboardKey KEY_W               = 87;       // Key: W | w
const KeyboardKey KEY_X               = 88;       // Key: X | x
const KeyboardKey KEY_Y               = 89;       // Key: Y | y
const KeyboardKey KEY_Z               = 90;       // Key: Z | z
const KeyboardKey KEY_LEFT_BRACKET    = 91;       // Key: [
const KeyboardKey KEY_BACKSLASH       = 92;       // Key: '\'
const KeyboardKey KEY_RIGHT_BRACKET   = 93;       // Key: ]
const KeyboardKey KEY_GRAVE           = 96;       // Key: `
// Function keys
const KeyboardKey KEY_SPACE           = 32;       // Key: Space
const KeyboardKey KEY_ESCAPE          = 256;      // Key: Esc
const KeyboardKey KEY_ENTER           = 257;      // Key: Enter
const KeyboardKey KEY_TAB             = 258;      // Key: Tab
const KeyboardKey KEY_BACKSPACE       = 259;      // Key: Backspace
const KeyboardKey KEY_INSERT          = 260;      // Key: Ins
const KeyboardKey KEY_DELETE          = 261;      // Key: Del
const KeyboardKey KEY_RIGHT           = 262;      // Key: Cursor right
const KeyboardKey KEY_LEFT            = 263;      // Key: Cursor left
const KeyboardKey KEY_DOWN            = 264;      // Key: Cursor down
const KeyboardKey KEY_UP              = 265;      // Key: Cursor up
const KeyboardKey KEY_PAGE_UP         = 266;      // Key: Page up
const KeyboardKey KEY_PAGE_DOWN       = 267;      // Key: Page down
const KeyboardKey KEY_HOME            = 268;      // Key: Home
const KeyboardKey KEY_END             = 269;      // Key: End
const KeyboardKey KEY_CAPS_LOCK       = 280;      // Key: Caps lock
const KeyboardKey KEY_SCROLL_LOCK     = 281;      // Key: Scroll down
const KeyboardKey KEY_NUM_LOCK        = 282;      // Key: Num lock
const KeyboardKey KEY_PRINT_SCREEN    = 283;      // Key: Print screen
const KeyboardKey KEY_PAUSE           = 284;      // Key: Pause
const KeyboardKey KEY_F1              = 290;      // Key: F1
const KeyboardKey KEY_F2              = 291;      // Key: F2
const KeyboardKey KEY_F3              = 292;      // Key: F3
const KeyboardKey KEY_F4              = 293;      // Key: F4
const KeyboardKey KEY_F5              = 294;      // Key: F5
const KeyboardKey KEY_F6              = 295;      // Key: F6
const KeyboardKey KEY_F7              = 296;      // Key: F7
const KeyboardKey KEY_F8              = 297;      // Key: F8
const KeyboardKey KEY_F9              = 298;      // Key: F9
const KeyboardKey KEY_F10             = 299;      // Key: F10
const KeyboardKey KEY_F11             = 300;      // Key: F11
const KeyboardKey KEY_F12             = 301;      // Key: F12
const KeyboardKey KEY_LEFT_SHIFT      = 340;      // Key: Shift left
const KeyboardKey KEY_LEFT_CONTROL    = 341;      // Key: Control left
const KeyboardKey KEY_LEFT_ALT        = 342;      // Key: Alt left
const KeyboardKey KEY_LEFT_SUPER      = 343;      // Key: Super left
const KeyboardKey KEY_RIGHT_SHIFT     = 344;      // Key: Shift right
const KeyboardKey KEY_RIGHT_CONTROL   = 345;      // Key: Control right
const KeyboardKey KEY_RIGHT_ALT       = 346;      // Key: Alt right
const KeyboardKey KEY_RIGHT_SUPER     = 347;      // Key: Super right
const KeyboardKey KEY_KB_MENU         = 348;      // Key: KB menu
// Keypad keys
const KeyboardKey KEY_KP_0            = 320;      // Key: Keypad 0
const KeyboardKey KEY_KP_1            = 321;      // Key: Keypad 1
const KeyboardKey KEY_KP_2            = 322;      // Key: Keypad 2
const KeyboardKey KEY_KP_3            = 323;      // Key: Keypad 3
const KeyboardKey KEY_KP_4            = 324;      // Key: Keypad 4
const KeyboardKey KEY_KP_5            = 325;      // Key: Keypad 5
const KeyboardKey KEY_KP_6            = 326;      // Key: Keypad 6
const KeyboardKey KEY_KP_7            = 327;      // Key: Keypad 7
const KeyboardKey KEY_KP_8            = 328;      // Key: Keypad 8
const KeyboardKey KEY_KP_9            = 329;      // Key: Keypad 9
const KeyboardKey KEY_KP_DECIMAL      = 330;      // Key: Keypad .
const KeyboardKey KEY_KP_DIVIDE       = 331;      // Key: Keypad /
const KeyboardKey KEY_KP_MULTIPLY     = 332;      // Key: Keypad *
const KeyboardKey KEY_KP_SUBTRACT     = 333;      // Key: Keypad -
const KeyboardKey KEY_KP_ADD          = 334;      // Key: Keypad +
const KeyboardKey KEY_KP_ENTER        = 335;      // Key: Keypad Enter
const KeyboardKey KEY_KP_EQUAL        = 336;      // Key: Keypad =
// Android key buttons
const KeyboardKey KEY_BACK            = 4;        // Key: Android back button
const KeyboardKey KEY_MENU            = 82;       // Key: Android menu button
const KeyboardKey KEY_VOLUME_UP       = 24;       // Key: Android volume up button
const KeyboardKey KEY_VOLUME_DOWN     = 25;       // Key: Android volume down button

